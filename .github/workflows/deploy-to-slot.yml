name: Deploy to Azure App Service Slot

on:
  workflow_dispatch:
    inputs:
      slot:
        description: 'Target slot (production or staging)'
        required: true
        default: 'staging'
        type: choice
        options:
        - production
        - staging
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AZURE_WEBAPP_NAME: ${{ vars.AZURE_WEBAPP_NAME }}
  AZURE_WEBAPP_RESOURCE_GROUP: ${{ vars.AZURE_WEBAPP_RESOURCE_GROUP }}
  AZURE_WEBAPP_PACKAGE_PATH: './DeadlockApp'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/DeadlockApp.csproj

    - name: Build application
      run: dotnet build ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/DeadlockApp.csproj --configuration Release --no-restore

    - name: Test application
      run: dotnet test ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/DeadlockApp.csproj --configuration Release --no-build --verbosity normal

    - name: Publish application
      run: dotnet publish ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/DeadlockApp.csproj --configuration Release --output ./publish --no-build

    - name: Create deployment package
      run: |
        cd publish
        zip -r ../app.zip .
        cd ..

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to App Service Slot
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        resource-group: ${{ env.AZURE_WEBAPP_RESOURCE_GROUP }}
        slot-name: ${{ github.event.inputs.slot }}
        package: ./app.zip

    - name: Health Check
      run: |
        # Determine the URL based on slot
        if [ "${{ github.event.inputs.slot }}" = "production" ]; then
          URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        else
          URL="https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net"
        fi
        
        echo "Testing health endpoint: $URL/health"
        
        # Wait for deployment to be ready
        for i in {1..30}; do
          if curl -f "$URL/health" > /dev/null 2>&1; then
            echo "Health check passed after $i attempts"
            break
          fi
          echo "Health check attempt $i failed, retrying in 10 seconds..."
          sleep 10
        done
        
        # Get detailed health status
        echo "Health status:"
        curl -s "$URL/health" | jq '.' || curl -s "$URL/health"

    - name: Performance Baseline Test
      if: github.event.inputs.slot == 'production'
      run: |
        URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        
        echo "Running performance baseline test..."
        
        # Test key endpoints
        endpoints=("/api/products" "/api/products/1" "/api/products/search?query=test")
        response_times=()
        
        for endpoint in "${endpoints[@]}"; do
          echo "Testing $endpoint..."
          
          start_time=$(date +%s%3N)
          response_code=$(curl -s -o /dev/null -w "%{http_code}" "$URL$endpoint")
          end_time=$(date +%s%3N)
          
          response_time=$((end_time - start_time))
          response_times+=($response_time)
          
          echo "  Response code: $response_code"
          echo "  Response time: ${response_time}ms"
          
          if [ $response_time -gt 2000 ]; then
            echo "  WARNING: Slow response time detected"
          fi
        done
        
        # Calculate average response time
        total=0
        for time in "${response_times[@]}"; do
          total=$((total + time))
        done
        avg=$((total / ${#response_times[@]}))
        
        echo "Average response time: ${avg}ms"
        
        if [ $avg -gt 1000 ]; then
          echo "ERROR: Performance baseline test failed - average response time too high"
          exit 1
        else
          echo "Performance baseline test passed"
        fi

    - name: Output Deployment Information
      run: |
        if [ "${{ github.event.inputs.slot }}" = "production" ]; then
          URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        else
          URL="https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net"
        fi
        
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Slot**: ${{ github.event.inputs.slot }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: $URL" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check**: $URL/health" >> $GITHUB_STEP_SUMMARY
        echo "- **Application Insights**: Available in Azure Portal" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Azure Portal](https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_WEBAPP_RESOURCE_GROUP }}/providers/Microsoft.Web/sites/${{ env.AZURE_WEBAPP_NAME }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Application Insights Live Metrics](https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_WEBAPP_RESOURCE_GROUP }}/providers/Microsoft.Insights/components/${{ env.AZURE_WEBAPP_NAME }}-ai)" >> $GITHUB_STEP_SUMMARY
